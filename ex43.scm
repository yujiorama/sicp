(load "./chapter4.scm")

;; (define (eval exp env)
;;   (cond ((self-evaluating? exp) exp)
;;         ((variable? exp) (lookup-variable-value exp env))
;;         ((quoted? exp) (text-of-quotation exp))
;;         ((assignment? exp) (eval-assignment exp env))
;;         ((definition? exp) (eval-definition exp env))
;;         ((if? exp) (eval-if exp env))
;;         ((lambda? exp)
;;          (make-procedure (lambda-parameters exp)
;;                          (lambda-body exp)
;;                          env))
;;         ((begin? exp)
;;          (eval-sequence (begin-actions exp) env))
;;         ((cond? exp) (eval (cond->if exp) env))
;;         ((application? exp)
;;          (apply (eval (operator exp) env)
;;                 (list-of-values (operands exp) env)))
;;         (else
;;          (error "Unkown expression type -- EVAL" exp))))

(use util.list)

(define (make-table)
  (let ((tbl '()))
    (lambda (proc argv)
      (cond ((eq? 'get proc)
             (assoc-ref tbl (car argv)))
            ((eq? 'put proc)
             (set! tbl (assoc-set! tbl (car argv) (cdr argv))))))))

(define *syntax-map* (make-table))

(define (put key val)
  (*syntax-map* 'put (list key val)))
(define (get key)
  (*syntax-map* 'get (list key)))

(define (install-dataoriented-eval)
  (put 'quote text-of-quotation)
  (put 'set! eval-assignment)
  (put 'define eval-definition)
  (put 'lambda
       (lambda (exp env)
         (make-procedure (lambda-parameters exp)
                         (lambda-body exp)
                         env)))
  (put 'if eval-if)
  (put 'begin
       (lambda (exp env)
         (eval-sequence (begin-actions exp) env)))
  (put 'cond
       (lambda (exp env)
         (eval (cond->if exp) env)))
  )

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((get (car exp))
         ((get (car exp)) exp env))
        ((application? exp)
         (apply (eval (operator exp) env)
                (list-of-values (operands exp) env)))
        (else
         (error "Unkown expression type -- EVAL" exp))))
